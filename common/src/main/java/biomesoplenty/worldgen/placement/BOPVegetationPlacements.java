/*******************************************************************************
 * Copyright 2022, the Glitchfiend Team.
 * All rights reserved.
 ******************************************************************************/
package biomesoplenty.worldgen.placement;

import biomesoplenty.api.block.BOPBlocks;
import biomesoplenty.worldgen.feature.BOPTreeFeatures;
import biomesoplenty.worldgen.feature.BOPVegetationFeatures;
import biomesoplenty.util.worldgen.BOPPlacementUtils;
import com.google.common.collect.ImmutableList;
import net.minecraft.core.Holder;
import net.minecraft.core.HolderGetter;
import net.minecraft.core.registries.Registries;
import net.minecraft.data.worldgen.BootstapContext;
import net.minecraft.data.worldgen.features.MiscOverworldFeatures;
import net.minecraft.data.worldgen.features.TreeFeatures;
import net.minecraft.data.worldgen.features.VegetationFeatures;
import net.minecraft.data.worldgen.placement.PlacementUtils;
import net.minecraft.data.worldgen.placement.VegetationPlacements;
import net.minecraft.resources.ResourceKey;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.placement.*;

import java.util.List;

import static net.minecraft.data.worldgen.placement.VegetationPlacements.treePlacement;

public class BOPVegetationPlacements
{
    public static final ResourceKey<PlacedFeature> CLOVER_NORMAL = BOPPlacementUtils.createKey("patch_clover_normal");
    public static final ResourceKey<PlacedFeature> CLOVER_EXTRA = BOPPlacementUtils.createKey("patch_clover_extra");
    public static final ResourceKey<PlacedFeature> COLD_DESERT_ROCKS = BOPPlacementUtils.createKey("cold_desert_rocks");
    public static final ResourceKey<PlacedFeature> HIGHLAND_ROCKS = BOPPlacementUtils.createKey("highland_rocks");
    public static final ResourceKey<PlacedFeature> HUGE_TOADSTOOL = BOPPlacementUtils.createKey("huge_toadstool");
    public static final ResourceKey<PlacedFeature> HUGE_CLOVER = BOPPlacementUtils.createKey("huge_clover");
    public static final ResourceKey<PlacedFeature> HUGE_LILY_PAD = BOPPlacementUtils.createKey("huge_lily_pad");
    public static final ResourceKey<PlacedFeature> HUGE_RED_MUSHROOM_EXTRA = BOPPlacementUtils.createKey("huge_red_mushroom_extra");
    public static final ResourceKey<PlacedFeature> PATCH_BARLEY = BOPPlacementUtils.createKey("patch_barley");
    public static final ResourceKey<PlacedFeature> PATCH_BARLEY_SPARSE = BOPPlacementUtils.createKey("patch_barley_sparse");
    public static final ResourceKey<PlacedFeature> PATCH_BLUE_HYDRANGEA = BOPPlacementUtils.createKey("patch_blue_hydrangea");
    public static final ResourceKey<PlacedFeature> PATCH_BUSH_1 = BOPPlacementUtils.createKey("patch_bush_1");
    public static final ResourceKey<PlacedFeature> PATCH_BUSH_4 = BOPPlacementUtils.createKey("patch_bush_4");
    public static final ResourceKey<PlacedFeature> PATCH_BUSH_10 = BOPPlacementUtils.createKey("patch_bush_10");
    public static final ResourceKey<PlacedFeature> PATCH_CATTAIL_NORMAL = BOPPlacementUtils.createKey("patch_cattail_normal");
    public static final ResourceKey<PlacedFeature> PATCH_CATTAIL_EXTRA = BOPPlacementUtils.createKey("patch_cattail_extra");
    public static final ResourceKey<PlacedFeature> PATCH_DEAD_BUSH_4 = BOPPlacementUtils.createKey("patch_dead_bush_4");
    public static final ResourceKey<PlacedFeature> PATCH_DEAD_GRASS = BOPPlacementUtils.createKey("patch_dead_grass");
    public static final ResourceKey<PlacedFeature> PATCH_DESERT_GRASS = BOPPlacementUtils.createKey("patch_desert_grass");
    public static final ResourceKey<PlacedFeature> PATCH_DESERT_GRASS_EXTRA = BOPPlacementUtils.createKey("patch_desert_grass_extra");
    public static final ResourceKey<PlacedFeature> PATCH_DUNE_GRASS = BOPPlacementUtils.createKey("patch_dune_grass");
    public static final ResourceKey<PlacedFeature> PATCH_FERN_2 = BOPPlacementUtils.createKey("patch_fern_2");
    public static final ResourceKey<PlacedFeature> PATCH_FERN_4 = BOPPlacementUtils.createKey("patch_fern_4");
    public static final ResourceKey<PlacedFeature> PATCH_FERN_8 = BOPPlacementUtils.createKey("patch_fern_8");
    public static final ResourceKey<PlacedFeature> PATCH_FERN_16 = BOPPlacementUtils.createKey("patch_fern_16");
    public static final ResourceKey<PlacedFeature> PATCH_GRASS_1 = BOPPlacementUtils.createKey("patch_grass_1");
    public static final ResourceKey<PlacedFeature> PATCH_GRASS_3 = BOPPlacementUtils.createKey("patch_grass_3");
    public static final ResourceKey<PlacedFeature> PATCH_GRASS_6 = BOPPlacementUtils.createKey("patch_grass_6");
    public static final ResourceKey<PlacedFeature> PATCH_GRASS_12 = BOPPlacementUtils.createKey("patch_grass_12");
    public static final ResourceKey<PlacedFeature> PATCH_GRASS_24 = BOPPlacementUtils.createKey("patch_grass_24");
    public static final ResourceKey<PlacedFeature> PATCH_ICY_IRIS = BOPPlacementUtils.createKey("patch_icy_iris");
    public static final ResourceKey<PlacedFeature> PATCH_LARGE_FERN_NORMAL = BOPPlacementUtils.createKey("patch_large_fern_normal");
    public static final ResourceKey<PlacedFeature> PATCH_LARGE_FERN_EXTRA = BOPPlacementUtils.createKey("patch_large_fern_extra");
    public static final ResourceKey<PlacedFeature> PATCH_SEA_OATS = BOPPlacementUtils.createKey("patch_sea_oats");
    public static final ResourceKey<PlacedFeature> PATCH_SPROUTS_1 = BOPPlacementUtils.createKey("patch_sprouts_1");
    public static final ResourceKey<PlacedFeature> PATCH_SPROUTS_5 = BOPPlacementUtils.createKey("patch_sprouts_5");
    public static final ResourceKey<PlacedFeature> PATCH_SPROUTS_10 = BOPPlacementUtils.createKey("patch_sprouts_10");
    public static final ResourceKey<PlacedFeature> PATCH_SPROUTS_15 = BOPPlacementUtils.createKey("patch_sprouts_15");
    public static final ResourceKey<PlacedFeature> PATCH_TALL_GRASS_6 = BOPPlacementUtils.createKey("patch_tall_grass_6");
    public static final ResourceKey<PlacedFeature> PATCH_TALL_GRASS_12 = BOPPlacementUtils.createKey("patch_tall_grass_12");
    public static final ResourceKey<PlacedFeature> PATCH_TALL_GRASS_24 = BOPPlacementUtils.createKey("patch_tall_grass_24");
    public static final ResourceKey<PlacedFeature> PATCH_TALL_GRASS_64 = BOPPlacementUtils.createKey("patch_tall_grass_64");
    public static final ResourceKey<PlacedFeature> PATCH_TALL_GRASS_128 = BOPPlacementUtils.createKey("patch_tall_grass_128");
    public static final ResourceKey<PlacedFeature> PATCH_TALL_LAVENDER = BOPPlacementUtils.createKey("patch_tall_lavender");
    public static final ResourceKey<PlacedFeature> PATCH_TALL_LAVENDER_FOREST = BOPPlacementUtils.createKey("patch_tall_lavender_forest");
    public static final ResourceKey<PlacedFeature> PATCH_TALL_WHITE_LAVENDER = BOPPlacementUtils.createKey("patch_tall_white_lavender");
    public static final ResourceKey<PlacedFeature> PATCH_TINY_CACTUS = BOPPlacementUtils.createKey("patch_tiny_cactus");
    public static final ResourceKey<PlacedFeature> PATCH_TUNDRA_SHRUBS = BOPPlacementUtils.createKey("patch_tundra_shrubs");
    public static final ResourceKey<PlacedFeature> RAINFOREST_CLIFFS_VINES = BOPPlacementUtils.createKey("rainforest_cliffs_vines");
    public static final ResourceKey<PlacedFeature> SMALL_BROWN_MUSHROOM = BOPPlacementUtils.createKey("small_brown_mushroom");
    public static final ResourceKey<PlacedFeature> SMALL_TOADSTOOL = BOPPlacementUtils.createKey("small_toadstool");
    public static final ResourceKey<PlacedFeature> SMALL_RED_MUSHROOM = BOPPlacementUtils.createKey("small_red_mushroom");
    public static final ResourceKey<PlacedFeature> WASTELAND_GRASS_1 = BOPPlacementUtils.createKey("wasteland_grass_1");
    public static final ResourceKey<PlacedFeature> WASTELAND_GRASS_2 = BOPPlacementUtils.createKey("wasteland_grass_2");
    public static final ResourceKey<PlacedFeature> DRIPSTONE_SPLATTER = BOPPlacementUtils.createKey("dripstone_splatter");
    public static final ResourceKey<PlacedFeature> MYCELIUM_SPLATTER = BOPPlacementUtils.createKey("mycelium_splatter");
    public static final ResourceKey<PlacedFeature> TOADSTOOL_NORMAL = BOPPlacementUtils.createKey("toadstool_normal");
    public static final ResourceKey<PlacedFeature> TOADSTOOL_EXTRA = BOPPlacementUtils.createKey("toadstool_extra");
    public static final ResourceKey<PlacedFeature> LILY_PAD_5 = BOPPlacementUtils.createKey("patch_lily_pad_5");
    public static final ResourceKey<PlacedFeature> LILY_PAD_10 = BOPPlacementUtils.createKey("patch_lily_pad_10");
    public static final ResourceKey<PlacedFeature> LILY_PAD_15 = BOPPlacementUtils.createKey("patch_lily_pad_15");
    public static final ResourceKey<PlacedFeature> WATERLILY_FLOWERS = BOPPlacementUtils.createKey("patch_waterlily_flowers");
    public static final ResourceKey<PlacedFeature> PATCH_REED_5 = BOPPlacementUtils.createKey("patch_reed_5");
    public static final ResourceKey<PlacedFeature> PATCH_REED_10 = BOPPlacementUtils.createKey("patch_reed_10");
    public static final ResourceKey<PlacedFeature> PATCH_WATERGRASS_10 = BOPPlacementUtils.createKey("patch_watergrass_10");
    public static final ResourceKey<PlacedFeature> PATCH_WATERGRASS_50 = BOPPlacementUtils.createKey("patch_watergrass_50");
    public static final ResourceKey<PlacedFeature> PATCH_WATERGRASS_250 = BOPPlacementUtils.createKey("patch_watergrass_250");
    public static final ResourceKey<PlacedFeature> FLOWER_LAVENDER = BOPPlacementUtils.createKey("flower_lavender");
    public static final ResourceKey<PlacedFeature> FLOWER_JACARANDA_GLADE = BOPPlacementUtils.createKey("flower_jacaranda_glade");
    public static final ResourceKey<PlacedFeature> FLOWER_LUSH_DESERT = BOPPlacementUtils.createKey("flower_lush_desert");
    public static final ResourceKey<PlacedFeature> FLOWER_CONIFEROUS_FOREST = BOPPlacementUtils.createKey("flower_coniferous_forest");
    public static final ResourceKey<PlacedFeature> FLOWER_DEFAULT_EXTENDED_6 = BOPPlacementUtils.createKey("flower_default_extended_6");
    public static final ResourceKey<PlacedFeature> FLOWER_DEFAULT_EXTENDED_15 = BOPPlacementUtils.createKey("flower_default_extended_15");
    public static final ResourceKey<PlacedFeature> FLOWER_FIELD = BOPPlacementUtils.createKey("flower_field");
    public static final ResourceKey<PlacedFeature> FLOWER_OVERGROWN_GREENS = BOPPlacementUtils.createKey("flower_overgrown_greens");
    public static final ResourceKey<PlacedFeature> FLOWER_MOOR = BOPPlacementUtils.createKey("flower_moor");
    public static final ResourceKey<PlacedFeature> FLOWER_MYSTIC_GROVE = BOPPlacementUtils.createKey("flower_mystic_grove");
    public static final ResourceKey<PlacedFeature> FLOWER_OMINOUS_WOODS = BOPPlacementUtils.createKey("flower_ominous_woods");
    public static final ResourceKey<PlacedFeature> FLOWER_ORIGIN_VALLEY = BOPPlacementUtils.createKey("flower_origin_valley");
    public static final ResourceKey<PlacedFeature> FLOWER_POPPY = BOPPlacementUtils.createKey("flower_poppy");
    public static final ResourceKey<PlacedFeature> FLOWER_RAINFOREST = BOPPlacementUtils.createKey("flower_rainforest");
    public static final ResourceKey<PlacedFeature> FLOWER_SCRUBLAND = BOPPlacementUtils.createKey("flower_scrubland");
    public static final ResourceKey<PlacedFeature> FLOWER_SHRUBLAND = BOPPlacementUtils.createKey("flower_shrubland");
    public static final ResourceKey<PlacedFeature> FLOWER_SNOWBLOSSOM_GROVE = BOPPlacementUtils.createKey("flower_snowblossom_grove");
    public static final ResourceKey<PlacedFeature> FLOWER_SNOWY = BOPPlacementUtils.createKey("flower_snowy");
    public static final ResourceKey<PlacedFeature> FLOWER_TROPICS = BOPPlacementUtils.createKey("flower_tropics");
    public static final ResourceKey<PlacedFeature> FLOWER_VIOLET = BOPPlacementUtils.createKey("flower_violet");
    public static final ResourceKey<PlacedFeature> FLOWER_WASTELAND = BOPPlacementUtils.createKey("flower_wasteland");
    public static final ResourceKey<PlacedFeature> FLOWER_WETLAND = BOPPlacementUtils.createKey("flower_wetland");
    public static final ResourceKey<PlacedFeature> FLOWER_WILDFLOWER = BOPPlacementUtils.createKey("flower_wildflower");
    public static final ResourceKey<PlacedFeature> GOLDENROD = BOPPlacementUtils.createKey("goldenrod");
    public static final ResourceKey<PlacedFeature> LILAC_NORMAL = BOPPlacementUtils.createKey("patch_lilac_normal");
    public static final ResourceKey<PlacedFeature> LILAC_EXTRA = BOPPlacementUtils.createKey("patch_lilac_extra");
    public static final ResourceKey<PlacedFeature> PEONY = BOPPlacementUtils.createKey("patch_peony");
    public static final ResourceKey<PlacedFeature> ROSE_BUSH_NORMAL = BOPPlacementUtils.createKey("rose_bush_normal");
    public static final ResourceKey<PlacedFeature> ROSE_BUSH_EXTRA = BOPPlacementUtils.createKey("rose_bush_extra");
    public static final ResourceKey<PlacedFeature> SPROUT_BONEMEAL = BOPPlacementUtils.createKey("sprout_bonemeal");
    public static final ResourceKey<PlacedFeature> SUNFLOWER = BOPPlacementUtils.createKey("sunflower");
    public static final ResourceKey<PlacedFeature> TREES_ASPEN_GLADE = BOPPlacementUtils.createKey("trees_aspen_glade");
    public static final ResourceKey<PlacedFeature> TREES_AURORAL_GARDEN = BOPPlacementUtils.createKey("trees_auroral_garden");
    public static final ResourceKey<PlacedFeature> TREES_BAYOU = BOPPlacementUtils.createKey("trees_bayou");
    public static final ResourceKey<PlacedFeature> TREES_BOG = BOPPlacementUtils.createKey("trees_bog");
    public static final ResourceKey<PlacedFeature> TREES_CONIFEROUS_FOREST = BOPPlacementUtils.createKey("trees_coniferous_forest");
    public static final ResourceKey<PlacedFeature> TREES_DEAD_FOREST = BOPPlacementUtils.createKey("trees_dead_forest");
    public static final ResourceKey<PlacedFeature> TREES_DENSE_WOODLAND = BOPPlacementUtils.createKey("trees_dense_woodland");
    public static final ResourceKey<PlacedFeature> TREES_DRYLAND = BOPPlacementUtils.createKey("trees_dryland");
    public static final ResourceKey<PlacedFeature> TREES_FIELD = BOPPlacementUtils.createKey("trees_field");
    public static final ResourceKey<PlacedFeature> TREES_FIELD_FOREST = BOPPlacementUtils.createKey("trees_field_forest");
    public static final ResourceKey<PlacedFeature> TREES_FUNGAL_JUNGLE = BOPPlacementUtils.createKey("trees_fungal_jungle");
    public static final ResourceKey<PlacedFeature> TREES_FIR_CLEARING = BOPPlacementUtils.createKey("trees_fir_clearing");
    public static final ResourceKey<PlacedFeature> TREES_JACARANDA_GLADE = BOPPlacementUtils.createKey("trees_jacaranda_glade");
    public static final ResourceKey<PlacedFeature> TREES_JADE_CLIFFS = BOPPlacementUtils.createKey("trees_jade_cliffs");
    public static final ResourceKey<PlacedFeature> TREES_HOT_SPRINGS = BOPPlacementUtils.createKey("trees_hot_springs");
    public static final ResourceKey<PlacedFeature> TREES_LAVENDER_FIELD = BOPPlacementUtils.createKey("trees_lavender_field");
    public static final ResourceKey<PlacedFeature> TREES_LUSH_DESERT = BOPPlacementUtils.createKey("trees_lush_desert");
    public static final ResourceKey<PlacedFeature> TREES_MAPLE_FOREST = BOPPlacementUtils.createKey("trees_maple_forest");
    public static final ResourceKey<PlacedFeature> TREES_MEDITERRANEAN_FOREST = BOPPlacementUtils.createKey("trees_mediterranean_forest");
    public static final ResourceKey<PlacedFeature> TREES_MUSKEG = BOPPlacementUtils.createKey("trees_muskeg");
    public static final ResourceKey<PlacedFeature> TREES_OLD_GROWTH_DEAD_FOREST = BOPPlacementUtils.createKey("trees_old_growth_dead_forest");
    public static final ResourceKey<PlacedFeature> TREES_MYSTIC_GROVE = BOPPlacementUtils.createKey("trees_mystic_grove");
    public static final ResourceKey<PlacedFeature> TREES_OMINOUS_WOODS = BOPPlacementUtils.createKey("trees_ominous_woods");
    public static final ResourceKey<PlacedFeature> TREES_ORCHARD = BOPPlacementUtils.createKey("trees_orchard");
    public static final ResourceKey<PlacedFeature> TREES_ORIGIN_VALLEY = BOPPlacementUtils.createKey("trees_origin_valley");
    public static final ResourceKey<PlacedFeature> TREES_PRAIRIE = BOPPlacementUtils.createKey("trees_prairie");
    public static final ResourceKey<PlacedFeature> TREES_SCRUBLAND = BOPPlacementUtils.createKey("trees_scrubland");
    public static final ResourceKey<PlacedFeature> TREES_WASTELAND = BOPPlacementUtils.createKey("trees_wasteland");
    public static final ResourceKey<PlacedFeature> TREES_WETLAND = BOPPlacementUtils.createKey("trees_wetland");
    public static final ResourceKey<PlacedFeature> TREES_WOODLAND = BOPPlacementUtils.createKey("trees_woodland");
    public static final ResourceKey<PlacedFeature> TREES_RAINFOREST = BOPPlacementUtils.createKey("trees_rainforest");
    public static final ResourceKey<PlacedFeature> TREES_RAINFOREST_CLIFFS = BOPPlacementUtils.createKey("trees_rainforest_cliffs");
    public static final ResourceKey<PlacedFeature> TREES_RAINFOREST_FLOODPLAIN = BOPPlacementUtils.createKey("trees_rainforest_floodplain");
    public static final ResourceKey<PlacedFeature> TREES_REDWOOD_FOREST = BOPPlacementUtils.createKey("trees_redwood_forest");
    public static final ResourceKey<PlacedFeature> TREES_ROCKY_SHRUBLAND = BOPPlacementUtils.createKey("trees_rocky_shrubland");
    public static final ResourceKey<PlacedFeature> TREES_SHRUBLAND = BOPPlacementUtils.createKey("trees_shrubland");
    public static final ResourceKey<PlacedFeature> TREES_SEASONAL_FOREST = BOPPlacementUtils.createKey("trees_seasonal_forest");
    public static final ResourceKey<PlacedFeature> TREES_SEASONAL_PUMPKIN_PATCH = BOPPlacementUtils.createKey("trees_seasonal_pumpkin_patch");
    public static final ResourceKey<PlacedFeature> TREES_SNOWBLOSSOM_GROVE = BOPPlacementUtils.createKey("trees_snowblossom_grove");
    public static final ResourceKey<PlacedFeature> TREES_SNOWY_CONIFEROUS_FOREST = BOPPlacementUtils.createKey("trees_snowy_coniferous_forest");
    public static final ResourceKey<PlacedFeature> TREES_SNOWY_MAPLE_FOREST = BOPPlacementUtils.createKey("trees_snowy_maple_forest");
    public static final ResourceKey<PlacedFeature> TREES_TROPICS = BOPPlacementUtils.createKey("trees_tropics");
    public static final ResourceKey<PlacedFeature> TREES_TUNDRA = BOPPlacementUtils.createKey("trees_tundra");
    public static final ResourceKey<PlacedFeature> TREES_VOLCANIC_PLAINS = BOPPlacementUtils.createKey("trees_volcanic_plains");
    public static final ResourceKey<PlacedFeature> HIGH_GRASS = BOPPlacementUtils.createKey("high_grass");
    public static final ResourceKey<PlacedFeature> BIG_DRIPLEAF = BOPPlacementUtils.createKey("big_dripleaf");
    public static final ResourceKey<PlacedFeature> BIG_PUMPKIN = BOPPlacementUtils.createKey("big_pumpkin");
    public static final ResourceKey<PlacedFeature> BRAMBLE = BOPPlacementUtils.createKey("bramble");
    public static final ResourceKey<PlacedFeature> HOT_SPRING_VENTS = BOPPlacementUtils.createKey("hot_spring_vents");
    public static final ResourceKey<PlacedFeature> MOSS_SPLATTER = BOPPlacementUtils.createKey("moss_splatter");
    public static final ResourceKey<PlacedFeature> PUMPKIN_PATCH = BOPPlacementUtils.createKey("pumpkin_patch");
    public static final ResourceKey<PlacedFeature> RED_MAPLE_LEAF_PILES = BOPPlacementUtils.createKey("red_maple_leaf_piles");
    public static final ResourceKey<PlacedFeature> ORANGE_MAPLE_LEAF_PILES = BOPPlacementUtils.createKey("orange_maple_leaf_piles");
    public static final ResourceKey<PlacedFeature> YELLOW_MAPLE_LEAF_PILES = BOPPlacementUtils.createKey("yellow_maple_leaf_piles");
    public static final ResourceKey<PlacedFeature> RED_MAPLE_LEAF_PILES_EXTRA = BOPPlacementUtils.createKey("red_maple_leaf_piles_extra");
    public static final ResourceKey<PlacedFeature> ORANGE_MAPLE_LEAF_PILES_EXTRA = BOPPlacementUtils.createKey("orange_maple_leaf_piles_extra");
    public static final ResourceKey<PlacedFeature> YELLOW_MAPLE_LEAF_PILES_EXTRA = BOPPlacementUtils.createKey("yellow_maple_leaf_piles_extra");
    public static final ResourceKey<PlacedFeature> SPARSE_DUNE_GRASS = BOPPlacementUtils.createKey("sparse_dune_grass");
    public static final ResourceKey<PlacedFeature> ROOTED_STUMP = BOPPlacementUtils.createKey("rooted_stump");
    public static final ResourceKey<PlacedFeature> SCATTERED_ROCKS = BOPPlacementUtils.createKey("scattered_rocks");
    public static final ResourceKey<PlacedFeature> SCATTERED_ROCKS_HIGHLAND = BOPPlacementUtils.createKey("scattered_rocks_highland");
    public static final ResourceKey<PlacedFeature> SCRUB_EXTRA = BOPPlacementUtils.createKey("scrub_extra");
    public static final ResourceKey<PlacedFeature> SCRUB_NORMAL = BOPPlacementUtils.createKey("scrub_normal");
    public static final ResourceKey<PlacedFeature> SHORT_BAMBOO = BOPPlacementUtils.createKey("short_bamboo");
    public static final ResourceKey<PlacedFeature> TERMITE_MOUND = BOPPlacementUtils.createKey("termite_mound");
    public static final ResourceKey<PlacedFeature> THIN_BAMBOO = BOPPlacementUtils.createKey("thin_bamboo");
    public static final ResourceKey<PlacedFeature> SMALL_DRIPLEAF = BOPPlacementUtils.createKey("small_dripleaf");
    public static final ResourceKey<PlacedFeature> FALLEN_LOG = BOPPlacementUtils.createKey("fallen_log");
    public static final ResourceKey<PlacedFeature> FALLEN_FIR_LOG = BOPPlacementUtils.createKey("fallen_fir_log");
    public static final ResourceKey<PlacedFeature> FALLEN_BIRCH_LOG = BOPPlacementUtils.createKey("fallen_birch_log");
    public static final ResourceKey<PlacedFeature> FALLEN_JACARANDA_LOG = BOPPlacementUtils.createKey("fallen_jacaranda_log");

    public static void bootstrap(BootstapContext<PlacedFeature> context)
    {
        HolderGetter<ConfiguredFeature<?, ?>> configuredFeatureGetter = context.lookup(Registries.CONFIGURED_FEATURE);

        final Holder<ConfiguredFeature<?, ?>> PATCH_CLOVER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_CLOVER);
        final Holder<ConfiguredFeature<?, ?>> HUGE_TOADSTOOL = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.HUGE_TOADSTOOL);
        final Holder<ConfiguredFeature<?, ?>> HUGE_CLOVER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.HUGE_CLOVER);
        final Holder<ConfiguredFeature<?, ?>> HUGE_LILY_PAD = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.HUGE_LILY_PAD);
        final Holder<ConfiguredFeature<?, ?>> PATCH_BARLEY = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_BARLEY);
        final Holder<ConfiguredFeature<?, ?>> HUGE_RED_MUSHROOM = configuredFeatureGetter.getOrThrow(TreeFeatures.HUGE_RED_MUSHROOM);
        final Holder<ConfiguredFeature<?, ?>> PATCH_BLUE_HYDRANGEA = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_BLUE_HYDRANGEA);
        final Holder<ConfiguredFeature<?, ?>> PATCH_BUSH = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_BUSH);
        final Holder<ConfiguredFeature<?, ?>> PATCH_CATTAIL = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_CATTAIL);
        final Holder<ConfiguredFeature<?, ?>> PATCH_DEAD_BUSH = configuredFeatureGetter.getOrThrow(VegetationFeatures.PATCH_DEAD_BUSH);
        final Holder<ConfiguredFeature<?, ?>> PATCH_DEAD_GRASS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_DEAD_GRASS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_DESERT_GRASS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_DESERT_GRASS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_DUNE_GRASS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_DUNE_GRASS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_FERN = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_FERN);
        final Holder<ConfiguredFeature<?, ?>> PATCH_GRASS = configuredFeatureGetter.getOrThrow(VegetationFeatures.PATCH_GRASS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_ICY_IRIS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_ICY_IRIS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_LARGE_FERN = configuredFeatureGetter.getOrThrow(VegetationFeatures.PATCH_LARGE_FERN);
        final Holder<ConfiguredFeature<?, ?>> PATCH_SEA_OATS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_SEA_OATS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_SPROUTS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_SPROUTS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_TALL_GRASS = configuredFeatureGetter.getOrThrow(VegetationFeatures.PATCH_TALL_GRASS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_TALL_LAVENDER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_TALL_LAVENDER);
        final Holder<ConfiguredFeature<?, ?>> PATCH_TALL_WHITE_LAVENDER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_TALL_WHITE_LAVENDER);
        final Holder<ConfiguredFeature<?, ?>> PATCH_TINY_CACTUS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_TINY_CACTUS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_TUNDRA_SHRUBS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_TUNDRA_SHRUBS);
        final Holder<ConfiguredFeature<?, ?>> RAINFOREST_CLIFFS_VINES = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.RAINFOREST_CLIFFS_VINES);
        final Holder<ConfiguredFeature<?, ?>> SMALL_BROWN_MUSHROOM = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SMALL_BROWN_MUSHROOM);
        final Holder<ConfiguredFeature<?, ?>> SMALL_TOADSTOOL = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SMALL_TOADSTOOL);
        final Holder<ConfiguredFeature<?, ?>> SMALL_RED_MUSHROOM = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SMALL_RED_MUSHROOM);
        final Holder<ConfiguredFeature<?, ?>> WASTELAND_GRASS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.WASTELAND_GRASS);
        final Holder<ConfiguredFeature<?, ?>> DRIPSTONE_SPLATTER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.DRIPSTONE_SPLATTER);
        final Holder<ConfiguredFeature<?, ?>> MYCELIUM_SPLATTER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.MYCELIUM_SPLATTER);
        final Holder<ConfiguredFeature<?, ?>> TOADSTOOL_NORMAL = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TOADSTOOL_NORMAL);
        final Holder<ConfiguredFeature<?, ?>> PATCH_WATERLILY = configuredFeatureGetter.getOrThrow(VegetationFeatures.PATCH_WATERLILY);
        final Holder<ConfiguredFeature<?, ?>> PATCH_REED = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_REED);
        final Holder<ConfiguredFeature<?, ?>> PATCH_WATERGRASS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_WATERGRASS);
        final Holder<ConfiguredFeature<?, ?>> PATCH_WATERLILY_FLOWER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_WATERLILY_FLOWER);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_LAVENDER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_LAVENDER);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_WILDFLOWER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_WILDFLOWER);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_CONIFEROUS_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_CONIFEROUS_FOREST);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_DEFAULT_EXTENDED = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_DEFAULT_EXTENDED);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_FIELD = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_FIELD);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_OVERGROWN_GREENS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_OVERGROWN_GREENS);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_JACARANDA_GLADE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_JACARANDA_GLADE);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_MOOR = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_MOOR);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_MYSTIC_GROVE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_MYSTIC_GROVE);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_OMINOUS_WOODS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_OMINOUS_WOODS);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_ORIGIN_VALLEY = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_ORIGIN_VALLEY);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_POPPY = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_POPPY);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_RAINFOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_RAINFOREST);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_SHRUBLAND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_SHRUBLAND);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_SNOWBLOSSOM_GROVE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_SNOWBLOSSOM_GROVE);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_SNOWY = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_SNOWY);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_TROPICS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_TROPICS);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_VIOLET = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_VIOLET);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_WASTELAND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_WASTELAND);
        final Holder<ConfiguredFeature<?, ?>> FLOWER_WETLAND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FLOWER_WETLAND);
        final Holder<ConfiguredFeature<?, ?>> GOLDENROD = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.GOLDENROD);
        final Holder<ConfiguredFeature<?, ?>> PATCH_LILAC = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_LILAC);
        final Holder<ConfiguredFeature<?, ?>> PATCH_PEONY = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PATCH_PEONY);
        final Holder<ConfiguredFeature<?, ?>> ROSE_BUSH = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.ROSE_BUSH);
        final Holder<ConfiguredFeature<?, ?>> SPROUT_BONEMEAL = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SPROUT_BONEMEAL);
        final Holder<ConfiguredFeature<?, ?>> SUNFLOWER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SUNFLOWER);
        final Holder<ConfiguredFeature<?, ?>> TREES_ASPEN_GLADE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_ASPEN_GLADE);
        final Holder<ConfiguredFeature<?, ?>> TREES_AURORAL_GARDEN = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_AURORAL_GARDEN);
        final Holder<ConfiguredFeature<?, ?>> TREES_BAYOU = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_BAYOU);
        final Holder<ConfiguredFeature<?, ?>> TREES_BOG = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_BOG);
        final Holder<ConfiguredFeature<?, ?>> TREES_CONIFEROUS_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_CONIFEROUS_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_DEAD_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_DEAD_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_DENSE_WOODLAND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_DENSE_WOODLAND);
        final Holder<ConfiguredFeature<?, ?>> TREES_DRYLAND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_DRYLAND);
        final Holder<ConfiguredFeature<?, ?>> TREES_FIELD = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_FIELD);
        final Holder<ConfiguredFeature<?, ?>> TREES_FIELD_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_FIELD_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_FUNGAL_JUNGLE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_FUNGAL_JUNGLE);
        final Holder<ConfiguredFeature<?, ?>> FIR_TREE_SMALL = configuredFeatureGetter.getOrThrow(BOPTreeFeatures.FIR_TREE_SMALL);
        final Holder<ConfiguredFeature<?, ?>> TREES_HOT_SPRINGS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_HOT_SPRINGS);
        final Holder<ConfiguredFeature<?, ?>> TREES_JACARANDA_GLADE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_JACARANDA_GLADE);
        final Holder<ConfiguredFeature<?, ?>> TREES_JADE_CLIFFS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_JADE_CLIFFS);
        final Holder<ConfiguredFeature<?, ?>> TREES_LAVENDER_FIELD = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_LAVENDER_FIELD);
        final Holder<ConfiguredFeature<?, ?>> TREES_LUSH_DESERT = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_LUSH_DESERT);
        final Holder<ConfiguredFeature<?, ?>> TREES_MAPLE_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_MAPLE_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_MEDITERRANEAN_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_MEDITERRANEAN_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_MUSKEG = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_MUSKEG);
        final Holder<ConfiguredFeature<?, ?>> TREES_OLD_GROWTH_DEAD_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_OLD_GROWTH_DEAD_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_MYSTIC_GROVE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_MYSTIC_GROVE);
        final Holder<ConfiguredFeature<?, ?>> TREES_OMINOUS_WOODS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_OMINOUS_WOODS);
        final Holder<ConfiguredFeature<?, ?>> TREES_ORCHARD = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_ORCHARD);
        final Holder<ConfiguredFeature<?, ?>> TREES_ORIGIN_VALLEY = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_ORIGIN_VALLEY);
        final Holder<ConfiguredFeature<?, ?>> TREES_PRAIRIE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_PRAIRIE);
        final Holder<ConfiguredFeature<?, ?>> TREES_WASTELAND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_WASTELAND);
        final Holder<ConfiguredFeature<?, ?>> TREES_WETLAND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_WETLAND);
        final Holder<ConfiguredFeature<?, ?>> OAK = configuredFeatureGetter.getOrThrow(TreeFeatures.OAK);
        final Holder<ConfiguredFeature<?, ?>> TREES_RAINFOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_RAINFOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_RAINFOREST_CLIFFS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_RAINFOREST_CLIFFS);
        final Holder<ConfiguredFeature<?, ?>> TREES_RAINFOREST_FLOODPLAIN = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_RAINFOREST_FLOODPLAIN);
        final Holder<ConfiguredFeature<?, ?>> TREES_REDWOOD_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_REDWOOD_FOREST);
        final Holder<ConfiguredFeature<?, ?>> OAK_BUSH = configuredFeatureGetter.getOrThrow(BOPTreeFeatures.OAK_BUSH);
        final Holder<ConfiguredFeature<?, ?>> TREES_SCRUBLAND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_SCRUBLAND);
        final Holder<ConfiguredFeature<?, ?>> TREES_SEASONAL_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_SEASONAL_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_SEASONAL_PUMPKIN_PATCH = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_SEASONAL_PUMPKIN_PATCH);
        final Holder<ConfiguredFeature<?, ?>> TREES_SNOWBLOSSOM_GROVE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_SNOWBLOSSOM_GROVE);
        final Holder<ConfiguredFeature<?, ?>> TREES_SNOWY_CONIFEROUS_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_SNOWY_CONIFEROUS_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_SNOWY_MAPLE_FOREST = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_SNOWY_MAPLE_FOREST);
        final Holder<ConfiguredFeature<?, ?>> TREES_TROPICS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_TROPICS);
        final Holder<ConfiguredFeature<?, ?>> TREES_TUNDRA = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TREES_TUNDRA);
        final Holder<ConfiguredFeature<?, ?>> TWIGLET_TREE_VOLCANO = configuredFeatureGetter.getOrThrow(BOPTreeFeatures.TWIGLET_TREE_VOLCANO);
        final Holder<ConfiguredFeature<?, ?>> HIGH_GRASS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.HIGH_GRASS);
        final Holder<ConfiguredFeature<?, ?>> BIG_DRIPLEAF = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.BIG_DRIPLEAF);
        final Holder<ConfiguredFeature<?, ?>> BIG_PUMPKIN = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.BIG_PUMPKIN);
        final Holder<ConfiguredFeature<?, ?>> BRAMBLE = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.BRAMBLE);
        final Holder<ConfiguredFeature<?, ?>> HOT_SPRING_VENTS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.HOT_SPRING_VENTS);
        final Holder<ConfiguredFeature<?, ?>> MOSS_SPLATTER = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.MOSS_SPLATTER);
        final Holder<ConfiguredFeature<?, ?>> PUMPKIN_PATCH = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.PUMPKIN_PATCH);
        final Holder<ConfiguredFeature<?, ?>> RED_MAPLE_LEAF_PILES = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.RED_MAPLE_LEAF_PILES);
        final Holder<ConfiguredFeature<?, ?>> ORANGE_MAPLE_LEAF_PILES = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.ORANGE_MAPLE_LEAF_PILES);
        final Holder<ConfiguredFeature<?, ?>> YELLOW_MAPLE_LEAF_PILES = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.YELLOW_MAPLE_LEAF_PILES);
        final Holder<ConfiguredFeature<?, ?>> SPARSE_DUNE_GRASS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SPARSE_DUNE_GRASS);
        final Holder<ConfiguredFeature<?, ?>> ROOTED_STUMP = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.ROOTED_STUMP);
        final Holder<ConfiguredFeature<?, ?>> SCATTERED_ROCKS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SCATTERED_ROCKS);
        final Holder<ConfiguredFeature<?, ?>> SCRUB = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SCRUB);
        final Holder<ConfiguredFeature<?, ?>> SHORT_BAMBOO = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SHORT_BAMBOO);
        final Holder<ConfiguredFeature<?, ?>> TERMITE_MOUND = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.TERMITE_MOUND);
        final Holder<ConfiguredFeature<?, ?>> THIN_BAMBOO = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.THIN_BAMBOO);
        final Holder<ConfiguredFeature<?, ?>> SMALL_DRIPLEAF = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.SMALL_DRIPLEAF);
        final Holder<ConfiguredFeature<?, ?>> FALLEN_LOG = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FALLEN_LOG);
        final Holder<ConfiguredFeature<?, ?>> FALLEN_FIR_LOG = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FALLEN_FIR_LOG);
        final Holder<ConfiguredFeature<?, ?>> FALLEN_BIRCH_LOG = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FALLEN_BIRCH_LOG);
        final Holder<ConfiguredFeature<?, ?>> FALLEN_JACARANDA_LOG = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.FALLEN_JACARANDA_LOG);
        final Holder<ConfiguredFeature<?, ?>> HIGHLAND_ROCKS = configuredFeatureGetter.getOrThrow(MiscOverworldFeatures.FOREST_ROCK);
        final Holder<ConfiguredFeature<?, ?>> COLD_DESERT_ROCKS = configuredFeatureGetter.getOrThrow(BOPVegetationFeatures.COLD_DESERT_ROCKS);

        register(context, BOPVegetationPlacements.CLOVER_NORMAL, PATCH_CLOVER, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.CLOVER_EXTRA, PATCH_CLOVER, VegetationPlacements.worldSurfaceSquaredWithCount(7));
        register(context, BOPVegetationPlacements.COLD_DESERT_ROCKS, COLD_DESERT_ROCKS, RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.HIGHLAND_ROCKS, HIGHLAND_ROCKS, RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.HUGE_TOADSTOOL, HUGE_TOADSTOOL, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.HUGE_CLOVER, HUGE_CLOVER, VegetationPlacements.worldSurfaceSquaredWithCount(10));
        register(context, BOPVegetationPlacements.HUGE_LILY_PAD, HUGE_LILY_PAD, VegetationPlacements.worldSurfaceSquaredWithCount(10));
        register(context, BOPVegetationPlacements.HUGE_RED_MUSHROOM_EXTRA, HUGE_RED_MUSHROOM, RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_BARLEY, PATCH_BARLEY, VegetationPlacements.worldSurfaceSquaredWithCount(10));
        register(context, BOPVegetationPlacements.PATCH_BARLEY_SPARSE, PATCH_BARLEY, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_BLUE_HYDRANGEA, PATCH_BLUE_HYDRANGEA, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_BUSH_1, PATCH_BUSH, VegetationPlacements.worldSurfaceSquaredWithCount(1));
        register(context, BOPVegetationPlacements.PATCH_BUSH_4, PATCH_BUSH, VegetationPlacements.worldSurfaceSquaredWithCount(3));
        register(context, BOPVegetationPlacements.PATCH_BUSH_10, PATCH_BUSH, VegetationPlacements.worldSurfaceSquaredWithCount(8));
        register(context, BOPVegetationPlacements.PATCH_CATTAIL_NORMAL, PATCH_CATTAIL, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.PATCH_CATTAIL_EXTRA, PATCH_CATTAIL, VegetationPlacements.worldSurfaceSquaredWithCount(5));
        register(context, BOPVegetationPlacements.PATCH_DEAD_BUSH_4, PATCH_DEAD_BUSH, VegetationPlacements.worldSurfaceSquaredWithCount(4));
        register(context, BOPVegetationPlacements.PATCH_DEAD_GRASS, PATCH_DEAD_GRASS, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_DESERT_GRASS, PATCH_DESERT_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(1));
        register(context, BOPVegetationPlacements.PATCH_DESERT_GRASS_EXTRA, PATCH_DESERT_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(3));
        register(context, BOPVegetationPlacements.PATCH_DUNE_GRASS, PATCH_DUNE_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(4));
        register(context, BOPVegetationPlacements.PATCH_FERN_2, PATCH_FERN, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.PATCH_FERN_4, PATCH_FERN, VegetationPlacements.worldSurfaceSquaredWithCount(4));
        register(context, BOPVegetationPlacements.PATCH_FERN_8, PATCH_FERN, VegetationPlacements.worldSurfaceSquaredWithCount(8));
        register(context, BOPVegetationPlacements.PATCH_FERN_16, PATCH_FERN, VegetationPlacements.worldSurfaceSquaredWithCount(16));
        register(context, BOPVegetationPlacements.PATCH_GRASS_1, PATCH_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(1));
        register(context, BOPVegetationPlacements.PATCH_GRASS_3, PATCH_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(3));
        register(context, BOPVegetationPlacements.PATCH_GRASS_6, PATCH_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(6));
        register(context, BOPVegetationPlacements.PATCH_GRASS_12, PATCH_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(12));
        register(context, BOPVegetationPlacements.PATCH_GRASS_24, PATCH_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(24));
        register(context, BOPVegetationPlacements.PATCH_ICY_IRIS, PATCH_ICY_IRIS, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_LARGE_FERN_NORMAL, PATCH_LARGE_FERN, RarityFilter.onAverageOnceEvery(7), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_LARGE_FERN_EXTRA, PATCH_LARGE_FERN, RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_SEA_OATS, PATCH_SEA_OATS, VegetationPlacements.worldSurfaceSquaredWithCount(5));
        register(context, BOPVegetationPlacements.PATCH_SPROUTS_1, PATCH_SPROUTS, RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_SPROUTS_5, PATCH_SPROUTS, VegetationPlacements.worldSurfaceSquaredWithCount(1));
        register(context, BOPVegetationPlacements.PATCH_SPROUTS_10, PATCH_SPROUTS, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.PATCH_SPROUTS_15, PATCH_SPROUTS, VegetationPlacements.worldSurfaceSquaredWithCount(6));
        register(context, BOPVegetationPlacements.PATCH_TALL_GRASS_6, PATCH_TALL_GRASS, RarityFilter.onAverageOnceEvery(8), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_TALL_GRASS_12, PATCH_TALL_GRASS, RarityFilter.onAverageOnceEvery(6), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_TALL_GRASS_24, PATCH_TALL_GRASS, RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_TALL_GRASS_64, PATCH_TALL_GRASS, RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_TALL_GRASS_128, PATCH_TALL_GRASS, RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.PATCH_TALL_LAVENDER, PATCH_TALL_LAVENDER, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_TALL_LAVENDER_FOREST, PATCH_TALL_LAVENDER, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_TALL_WHITE_LAVENDER, PATCH_TALL_WHITE_LAVENDER, List.of(RarityFilter.onAverageOnceEvery(7), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_TINY_CACTUS, PATCH_TINY_CACTUS, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_TUNDRA_SHRUBS, PATCH_TUNDRA_SHRUBS, VegetationPlacements.worldSurfaceSquaredWithCount(3));
        register(context, BOPVegetationPlacements.RAINFOREST_CLIFFS_VINES, RAINFOREST_CLIFFS_VINES, VegetationPlacements.worldSurfaceSquaredWithCount(10));
        register(context, BOPVegetationPlacements.SMALL_BROWN_MUSHROOM, SMALL_BROWN_MUSHROOM, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.SMALL_TOADSTOOL, SMALL_TOADSTOOL, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.SMALL_RED_MUSHROOM, SMALL_RED_MUSHROOM, List.of(RarityFilter.onAverageOnceEvery(6), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.WASTELAND_GRASS_1, WASTELAND_GRASS, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.WASTELAND_GRASS_2, WASTELAND_GRASS, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.DRIPSTONE_SPLATTER, DRIPSTONE_SPLATTER, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.MYCELIUM_SPLATTER, MYCELIUM_SPLATTER, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.TOADSTOOL_NORMAL, TOADSTOOL_NORMAL, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.TOADSTOOL_EXTRA, TOADSTOOL_NORMAL, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.LILY_PAD_5, PATCH_WATERLILY, RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.LILY_PAD_10, PATCH_WATERLILY, RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.LILY_PAD_15, PATCH_WATERLILY, VegetationPlacements.worldSurfaceSquaredWithCount(15));
        register(context, BOPVegetationPlacements.WATERLILY_FLOWERS, PATCH_WATERLILY_FLOWER, VegetationPlacements.worldSurfaceSquaredWithCount(3));
        register(context, BOPVegetationPlacements.PATCH_REED_5, PATCH_REED, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_REED_10, PATCH_REED, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_WATERGRASS_10, PATCH_WATERGRASS, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PATCH_WATERGRASS_50, PATCH_WATERGRASS, seagrassPlacement(10));
        register(context, BOPVegetationPlacements.PATCH_WATERGRASS_250, PATCH_WATERGRASS, seagrassPlacement(100));
        register(context, BOPVegetationPlacements.FLOWER_LAVENDER, FLOWER_LAVENDER, VegetationPlacements.worldSurfaceSquaredWithCount(15));
        register(context, BOPVegetationPlacements.FLOWER_JACARANDA_GLADE, FLOWER_JACARANDA_GLADE, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_LUSH_DESERT, FLOWER_WILDFLOWER, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_CONIFEROUS_FOREST, FLOWER_CONIFEROUS_FOREST, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_DEFAULT_EXTENDED_6, FLOWER_DEFAULT_EXTENDED, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_DEFAULT_EXTENDED_15, FLOWER_DEFAULT_EXTENDED, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_FIELD, FLOWER_FIELD, List.of(RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_OVERGROWN_GREENS, FLOWER_OVERGROWN_GREENS, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_MOOR, FLOWER_MOOR, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_MYSTIC_GROVE, FLOWER_MYSTIC_GROVE, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_OMINOUS_WOODS, FLOWER_OMINOUS_WOODS, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_ORIGIN_VALLEY, FLOWER_ORIGIN_VALLEY, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_POPPY, FLOWER_POPPY, VegetationPlacements.worldSurfaceSquaredWithCount(15));
        register(context, BOPVegetationPlacements.FLOWER_RAINFOREST, FLOWER_RAINFOREST, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_SCRUBLAND, FLOWER_WILDFLOWER, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_SHRUBLAND, FLOWER_SHRUBLAND, List.of(RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_SNOWBLOSSOM_GROVE, FLOWER_SNOWBLOSSOM_GROVE, NoiseThresholdCountPlacement.of(-0.8D, 5, 10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
        register(context, BOPVegetationPlacements.FLOWER_SNOWY, FLOWER_SNOWY, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_TROPICS, FLOWER_TROPICS, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_VIOLET, FLOWER_VIOLET, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.FLOWER_WASTELAND, FLOWER_WASTELAND, List.of(RarityFilter.onAverageOnceEvery(6), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_WETLAND, FLOWER_WETLAND, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FLOWER_WILDFLOWER, FLOWER_WILDFLOWER, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.GOLDENROD, GOLDENROD, List.of(RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.LILAC_NORMAL, PATCH_LILAC, List.of(RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.LILAC_EXTRA, PATCH_LILAC, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PEONY, PATCH_PEONY, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.ROSE_BUSH_NORMAL, ROSE_BUSH, List.of(RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.ROSE_BUSH_EXTRA, ROSE_BUSH, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.SPROUT_BONEMEAL, SPROUT_BONEMEAL, PlacementUtils.isEmpty());
        register(context, BOPVegetationPlacements.SUNFLOWER, SUNFLOWER, List.of(RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.TREES_ASPEN_GLADE, TREES_ASPEN_GLADE, treePlacement(PlacementUtils.countExtra(3, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_AURORAL_GARDEN, TREES_AURORAL_GARDEN, treePlacement(PlacementUtils.countExtra(10, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_BAYOU, TREES_BAYOU, waterTreePlacement(PlacementUtils.countExtra(2, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_BOG, TREES_BOG, treePlacement(PlacementUtils.countExtra(10, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_CONIFEROUS_FOREST, TREES_CONIFEROUS_FOREST, treePlacement(PlacementUtils.countExtra(10, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_DEAD_FOREST, TREES_DEAD_FOREST, treePlacement(PlacementUtils.countExtra(2, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_DENSE_WOODLAND, TREES_DENSE_WOODLAND, treePlacement(PlacementUtils.countExtra(12, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_DRYLAND, TREES_DRYLAND, treePlacement(PlacementUtils.countExtra(2, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_FIELD, TREES_FIELD, treePlacement(PlacementUtils.countExtra(3, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_FIELD_FOREST, TREES_FIELD_FOREST, treePlacement(PlacementUtils.countExtra(9, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_FUNGAL_JUNGLE, TREES_FUNGAL_JUNGLE, treePlacement(PlacementUtils.countExtra(5, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_FIR_CLEARING, FIR_TREE_SMALL, treePlacement(PlacementUtils.countExtra(1, 0.1F, 1), BOPBlocks.FIR_SAPLING));
        register(context, BOPVegetationPlacements.TREES_HOT_SPRINGS, TREES_HOT_SPRINGS, treePlacement(PlacementUtils.countExtra(2, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_JACARANDA_GLADE, TREES_JACARANDA_GLADE, treePlacement(PlacementUtils.countExtra(6, 0.2F, 15)));
        register(context, BOPVegetationPlacements.TREES_JADE_CLIFFS, TREES_JADE_CLIFFS, treePlacement(PlacementUtils.countExtra(25, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_LAVENDER_FIELD, TREES_LAVENDER_FIELD, treePlacement(PlacementUtils.countExtra(0, 0.2F, 9)));
        register(context, BOPVegetationPlacements.TREES_LUSH_DESERT, TREES_LUSH_DESERT, treePlacement(PlacementUtils.countExtra(0, 0.2F, 8)));
        register(context, BOPVegetationPlacements.TREES_MAPLE_FOREST, TREES_MAPLE_FOREST, treePlacement(PlacementUtils.countExtra(12, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_MEDITERRANEAN_FOREST, TREES_MEDITERRANEAN_FOREST, treePlacement(PlacementUtils.countExtra(2, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_MUSKEG, TREES_MUSKEG, treePlacement(PlacementUtils.countExtra(0, 0.5F, 1)));
        register(context, BOPVegetationPlacements.TREES_OLD_GROWTH_DEAD_FOREST, TREES_OLD_GROWTH_DEAD_FOREST, treePlacement(PlacementUtils.countExtra(5, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_MYSTIC_GROVE, TREES_MYSTIC_GROVE, treePlacement(PlacementUtils.countExtra(5, 0.2F, 10)));
        register(context, BOPVegetationPlacements.TREES_OMINOUS_WOODS, TREES_OMINOUS_WOODS, treePlacement(PlacementUtils.countExtra(6, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_ORCHARD, TREES_ORCHARD, treePlacement(PlacementUtils.countExtra(2, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_ORIGIN_VALLEY, TREES_ORIGIN_VALLEY, treePlacement(PlacementUtils.countExtra(2, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_PRAIRIE, TREES_PRAIRIE, treePlacement(PlacementUtils.countExtra(0, 0.2F, 2)));
        register(context, BOPVegetationPlacements.TREES_WASTELAND, TREES_WASTELAND, treePlacement(PlacementUtils.countExtra(0, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_WETLAND, TREES_WETLAND, treePlacement(PlacementUtils.countExtra(7, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_WOODLAND, OAK, treePlacement(PlacementUtils.countExtra(6, 0.1F, 1), Blocks.OAK_SAPLING));
        register(context, BOPVegetationPlacements.TREES_RAINFOREST, TREES_RAINFOREST, treePlacement(PlacementUtils.countExtra(12, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_RAINFOREST_CLIFFS, TREES_RAINFOREST_CLIFFS, treePlacement(PlacementUtils.countExtra(20, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_RAINFOREST_FLOODPLAIN, TREES_RAINFOREST_FLOODPLAIN, treePlacement(PlacementUtils.countExtra(1, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_REDWOOD_FOREST, TREES_REDWOOD_FOREST, treePlacement(PlacementUtils.countExtra(12, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_ROCKY_SHRUBLAND, OAK_BUSH, treePlacement(PlacementUtils.countExtra(6, 0.1F, 1), Blocks.OAK_SAPLING));
        register(context, BOPVegetationPlacements.TREES_SHRUBLAND, OAK_BUSH, treePlacement(PlacementUtils.countExtra(2, 0.05F, 1), Blocks.OAK_SAPLING));
        register(context, BOPVegetationPlacements.TREES_SCRUBLAND, TREES_SCRUBLAND, treePlacement(PlacementUtils.countExtra(0, 0.2F, 6)));
        register(context, BOPVegetationPlacements.TREES_SEASONAL_FOREST, TREES_SEASONAL_FOREST, treePlacement(PlacementUtils.countExtra(10, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_SEASONAL_PUMPKIN_PATCH, TREES_SEASONAL_PUMPKIN_PATCH, treePlacement(PlacementUtils.countExtra(6, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_SNOWBLOSSOM_GROVE, TREES_SNOWBLOSSOM_GROVE, treePlacement(PlacementUtils.countExtra(7, 0.1F, 1), BOPBlocks.SNOWBLOSSOM_SAPLING));
        register(context, BOPVegetationPlacements.TREES_SNOWY_CONIFEROUS_FOREST, TREES_SNOWY_CONIFEROUS_FOREST, treePlacement(PlacementUtils.countExtra(6, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_SNOWY_MAPLE_FOREST, TREES_SNOWY_MAPLE_FOREST, treePlacement(PlacementUtils.countExtra(8, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_TROPICS, TREES_TROPICS, treePlacement(PlacementUtils.countExtra(9, 0.2F, 1)));
        register(context, BOPVegetationPlacements.TREES_TUNDRA, TREES_TUNDRA, treePlacement(PlacementUtils.countExtra(1, 0.1F, 1)));
        register(context, BOPVegetationPlacements.TREES_VOLCANIC_PLAINS, TWIGLET_TREE_VOLCANO, treePlacement(PlacementUtils.countExtra(1, 0.1F, 1)));
        register(context, BOPVegetationPlacements.HIGH_GRASS, HIGH_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(30));
        register(context, BOPVegetationPlacements.BIG_DRIPLEAF, BIG_DRIPLEAF, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.BIG_PUMPKIN, BIG_PUMPKIN, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.BRAMBLE, BRAMBLE, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.HOT_SPRING_VENTS, HOT_SPRING_VENTS, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.MOSS_SPLATTER, MOSS_SPLATTER, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.PUMPKIN_PATCH, PUMPKIN_PATCH, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.RED_MAPLE_LEAF_PILES, RED_MAPLE_LEAF_PILES, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.ORANGE_MAPLE_LEAF_PILES, ORANGE_MAPLE_LEAF_PILES, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.YELLOW_MAPLE_LEAF_PILES, YELLOW_MAPLE_LEAF_PILES, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.RED_MAPLE_LEAF_PILES_EXTRA, RED_MAPLE_LEAF_PILES, VegetationPlacements.worldSurfaceSquaredWithCount(6));
        register(context, BOPVegetationPlacements.ORANGE_MAPLE_LEAF_PILES_EXTRA, ORANGE_MAPLE_LEAF_PILES, VegetationPlacements.worldSurfaceSquaredWithCount(8));
        register(context, BOPVegetationPlacements.YELLOW_MAPLE_LEAF_PILES_EXTRA, YELLOW_MAPLE_LEAF_PILES, VegetationPlacements.worldSurfaceSquaredWithCount(15));
        register(context, BOPVegetationPlacements.SPARSE_DUNE_GRASS, SPARSE_DUNE_GRASS, VegetationPlacements.worldSurfaceSquaredWithCount(1));
        register(context, BOPVegetationPlacements.ROOTED_STUMP, ROOTED_STUMP, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.SCATTERED_ROCKS, SCATTERED_ROCKS, List.of(RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.SCATTERED_ROCKS_HIGHLAND, SCATTERED_ROCKS, List.of(RarityFilter.onAverageOnceEvery(7), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.SCRUB_EXTRA, SCRUB, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.SCRUB_NORMAL, SCRUB, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.SHORT_BAMBOO, SHORT_BAMBOO, VegetationPlacements.worldSurfaceSquaredWithCount(2));
        register(context, BOPVegetationPlacements.TERMITE_MOUND, TERMITE_MOUND, List.of(RarityFilter.onAverageOnceEvery(12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.THIN_BAMBOO, THIN_BAMBOO, VegetationPlacements.worldSurfaceSquaredWithCount(5));
        register(context, BOPVegetationPlacements.SMALL_DRIPLEAF, SMALL_DRIPLEAF, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FALLEN_LOG, FALLEN_LOG, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FALLEN_FIR_LOG, FALLEN_FIR_LOG, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FALLEN_BIRCH_LOG, FALLEN_BIRCH_LOG, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
        register(context, BOPVegetationPlacements.FALLEN_JACARANDA_LOG, FALLEN_JACARANDA_LOG, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    }

    private static List<PlacementModifier> waterTreePlacement(PlacementModifier modifier)
    {
        return ImmutableList.<PlacementModifier>builder().add(modifier).add(InSquarePlacement.spread()).add(PlacementUtils.HEIGHTMAP_TOP_SOLID).add(BiomeFilter.biome()).build();
    }

    private static List<PlacementModifier> seagrassPlacement(int p_195234_) {
        return List.of(InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, CountPlacement.of(p_195234_), BiomeFilter.biome());
    }
    
    protected static void register(BootstapContext<PlacedFeature> context, ResourceKey<PlacedFeature> placedFeatureKey, Holder<ConfiguredFeature<?, ?>> configuredFeature, PlacementModifier... modifiers)
    {
        register(context, placedFeatureKey, configuredFeature, List.of(modifiers));
    }

    protected static void register(BootstapContext<PlacedFeature> context, ResourceKey<PlacedFeature> placedFeatureKey, Holder<ConfiguredFeature<?, ?>> configuredFeature, List<PlacementModifier> modifiers)
    {
        context.register(placedFeatureKey, new PlacedFeature(configuredFeature, modifiers));
    }
}
